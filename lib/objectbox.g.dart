// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1753322733699853364),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(3, 5262168614678265322),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 120752635555603702),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8246244604836918563),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5262168614678265322),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5978557150744964507),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(5, 5031635168868693744),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2528343423621635525),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2211626098773396723),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8367236893627922549),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5286245525750117059),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5031635168868693744),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1169414764086493767),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 5978557150744964507),
      lastIndexId: const obx_int.IdUid(1, 1169414764086493767),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Category(nameParam, typeParam, id: idParam);

          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[1],
        toOneRelations: (Transaction object) => [object.category],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addInt64(4, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object =
              Transaction(typeParam, amountParam, dateParam, id: idParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.category.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[0].properties[1]);

  /// See [Category.type].
  static final type =
      obx.QueryStringProperty<Category>(_entities[0].properties[2]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[1].properties[0]);

  /// See [Transaction.type].
  static final type =
      obx.QueryStringProperty<Transaction>(_entities[1].properties[1]);

  /// See [Transaction.amount].
  static final amount =
      obx.QueryDoubleProperty<Transaction>(_entities[1].properties[2]);

  /// See [Transaction.date].
  static final date =
      obx.QueryDateProperty<Transaction>(_entities[1].properties[3]);

  /// See [Transaction.category].
  static final category =
      obx.QueryRelationToOne<Transaction, Category>(_entities[1].properties[4]);
}
